// Generated by CoffeeScript 1.7.1
(function() {
  var Item, ItemView, Items, ItemsView, LoginView, Router,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var router;
    router = new Router;
    return Backbone.history.start();
  });

  Router = (function(_super) {
    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      "": "items",
      "item/:id": "item",
      "login": "login"
    };

    Router.prototype.view = null;

    Router.prototype.initialize = function() {
      return $.ajaxSetup({
        statusCode: {
          401: function() {
            return window.location.replace('/#login');
          }
        }
      });
    };

    Router.prototype.items = function() {
      if (this.view !== null) {
        this.view.undelegateEvents();
      }
      this.view = new ItemsView({
        collection: new Items
      });
      return this.view.render();
    };

    Router.prototype.item = function(id) {
      if (this.view !== null) {
        this.view.undelegateEvents();
      }
      this.view = new ItemView({
        model: new Item({
          id: id
        })
      });
      return this.view.render();
    };

    Router.prototype.login = function() {
      if (this.view !== null) {
        this.view.undelegateEvents();
      }
      this.view = new LoginView;
      return this.view.render();
    };

    return Router;

  })(Backbone.Router);

  Items = (function(_super) {
    __extends(Items, _super);

    function Items() {
      return Items.__super__.constructor.apply(this, arguments);
    }

    Items.prototype.url = 'items';

    return Items;

  })(Backbone.Collection);

  Item = (function(_super) {
    __extends(Item, _super);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.urlRoot = 'items';

    Item.prototype.defaults = {
      name: 'default'
    };

    return Item;

  })(Backbone.Model);

  ItemView = (function(_super) {
    __extends(ItemView, _super);

    function ItemView() {
      this.render = __bind(this.render, this);
      return ItemView.__super__.constructor.apply(this, arguments);
    }

    ItemView.prototype.el = 'body';

    ItemView.prototype.events = {
      'click #save': 'save'
    };

    ItemView.prototype.template = "<h1>Item</h1>\n<p>\n	name: <input id=\"field\" type=\"text\" value=\"{{name}}\"/> <button id=\"save\" type=\"button\" class=\"btn btn-default btn-xs\">Save</button>\n</p>\n<a href=\"\">Back</a>";

    ItemView.prototype.initialize = function() {
      this.model.on('reset change', this.render);
      return this.model.fetch({
        reset: true
      });
    };

    ItemView.prototype.render = function() {
      this.$el.html(Mustache.render(this.template, this.model.toJSON()));
      return this;
    };

    ItemView.prototype.save = function(event) {
      this.model.set({
        name: this.$('#field').val()
      });
      return this.model.save();
    };

    return ItemView;

  })(Backbone.View);

  ItemsView = (function(_super) {
    __extends(ItemsView, _super);

    function ItemsView() {
      this.render = __bind(this.render, this);
      return ItemsView.__super__.constructor.apply(this, arguments);
    }

    ItemsView.prototype.el = 'body';

    ItemsView.prototype.events = {
      'click #add': 'add',
      'click .edit': 'edit',
      'click .delete': 'delete'
    };

    ItemsView.prototype.template = "<h1>List</h1>\n<p>\n	<button id=\"add\" class=\"btn btn-default btn-xs\">Add</button>\n</p>\n<ul>\n	{{#items}}\n		<li>\n			<p>{{name}}</p>\n			<p data-item=\"{{id}}\">\n				<button type=\"button\" class=\"btn btn-default btn-xs edit\">Edit</button>\n				<button type=\"button\" class=\"btn btn-default btn-xs delete\">Delete</button>\n			</p>\n		</li>\n	{{/items}}\n</ul>";

    ItemsView.prototype.initialize = function() {
      this.collection.on('reset', this.render);
      return this.collection.fetch({
        reset: true
      });
    };

    ItemsView.prototype.render = function() {
      this.$el.html(Mustache.render(this.template, {
        items: this.collection.toJSON()
      }));
      return this;
    };

    ItemsView.prototype.add = function(event) {
      console.log(event);
      this.collection.create(new Item, {
        wait: true
      });
      return this.collection.fetch({
        reset: true
      });
    };

    ItemsView.prototype.edit = function(event) {
      var id;
      id = this.$(event.target).parent().data('item');
      return window.location.replace("/#item/" + id);
    };

    ItemsView.prototype["delete"] = function(event) {
      var item;
      item = new Item({
        id: this.$(event.target).parent().data('item')
      });
      item.destroy({
        wait: true
      });
      return this.collection.fetch({
        reset: true
      });
    };

    return ItemsView;

  })(Backbone.View);

  LoginView = (function(_super) {
    __extends(LoginView, _super);

    function LoginView() {
      this.render = __bind(this.render, this);
      return LoginView.__super__.constructor.apply(this, arguments);
    }

    LoginView.prototype.el = 'body';

    LoginView.prototype.events = {
      'click #ok': 'ok'
    };

    LoginView.prototype.template = "<h1>Login</h1>\n<p>\n	login: <input id=\"login\" type=\"text\"/>\n	<br>\n	pass: <input id=\"pass\" type=\"password\"/>\n</p>\n<button id=\"ok\" type=\"button\" class=\"btn btn-default btn-xs\">Ok</button>";

    LoginView.prototype.initialize = function() {};

    LoginView.prototype.render = function() {
      this.$el.html(Mustache.render(this.template));
      return this;
    };

    LoginView.prototype.ok = function(event) {
      return $.post('/login', {
        login: this.$('#login').val(),
        pass: this.$('#pass').val()
      }, function(data) {
        return window.location.replace('/#');
      });
    };

    return LoginView;

  })(Backbone.View);

}).call(this);
