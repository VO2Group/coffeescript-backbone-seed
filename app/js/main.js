// Generated by CoffeeScript 1.7.1
(function() {
  var Item, ItemView, Items, ItemsView, Router,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    new Router;
    return Backbone.history.start();
  });

  Router = (function(_super) {
    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      "": "items",
      "item/:id": "item"
    };

    Router.prototype.items = function() {
      var view;
      view = new ItemsView({
        collection: new Items
      });
      return view.render();
    };

    Router.prototype.item = function(id) {
      var view;
      view = new ItemView({
        model: new Item({
          id: id
        })
      });
      return view.render();
    };

    return Router;

  })(Backbone.Router);

  Items = (function(_super) {
    __extends(Items, _super);

    function Items() {
      return Items.__super__.constructor.apply(this, arguments);
    }

    Items.prototype.url = 'items';

    return Items;

  })(Backbone.Collection);

  Item = (function(_super) {
    __extends(Item, _super);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.defaults = {
      name: 'default'
    };

    return Item;

  })(Backbone.Model);

  ItemView = (function(_super) {
    __extends(ItemView, _super);

    function ItemView() {
      return ItemView.__super__.constructor.apply(this, arguments);
    }

    ItemView.prototype.el = 'body';

    ItemView.prototype.html = "<h1>Item</h1>\n<p>\n	id: {{id}}\n	name: {{name}}\n</p>";

    ItemView.prototype.initialize = function() {
      return this.render();
    };

    ItemView.prototype.render = function() {
      this.$el.html(Mustache.render(this.html, this.model.toJSON()));
      return this;
    };

    return ItemView;

  })(Backbone.View);

  ItemsView = (function(_super) {
    __extends(ItemsView, _super);

    function ItemsView() {
      this.render = __bind(this.render, this);
      return ItemsView.__super__.constructor.apply(this, arguments);
    }

    ItemsView.prototype.el = 'body';

    ItemsView.prototype.events = {
      'click #add': 'add'
    };

    ItemsView.prototype.html = "<h1>List</h1>\n<button id=\"add\">Add</button>\n<ul>\n	{{#list}}\n		<li><a href=\"#/item/{{id}}\">{{id}}: {{name}}</a></li>\n	{{/list}}\n</ul>";

    ItemsView.prototype.initialize = function() {
      this.collection.on('change', this.render);
      this.collection.on('reset', this.render);
      return this.collection.fetch({
        reset: true
      });
    };

    ItemsView.prototype.render = function() {
      this.$el.html(Mustache.render(this.html, {
        list: this.collection.toJSON()
      }));
      return this;
    };

    ItemsView.prototype.add = function() {
      this.collection.push(new Item({
        id: this.collection.length + 1
      }));
      return this.collection.trigger('change');
    };

    return ItemsView;

  })(Backbone.View);

}).call(this);
