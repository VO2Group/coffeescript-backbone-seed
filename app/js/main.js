// Generated by CoffeeScript 1.7.1
(function() {
  var Item, ItemView, List, ListView, Router,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    new Router;
    return Backbone.history.start();
  });

  Router = (function(_super) {
    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      "": "list",
      "item/:num": "item"
    };

    Router.prototype.list = function() {
      var view;
      view = new ListView({
        collection: new List
      });
      return view.render();
    };

    Router.prototype.item = function(num) {
      var view;
      view = new ItemView({
        model: new Item({
          num: num
        })
      });
      return view.render();
    };

    return Router;

  })(Backbone.Router);

  List = (function(_super) {
    __extends(List, _super);

    function List() {
      return List.__super__.constructor.apply(this, arguments);
    }

    List.prototype.model = Item;

    return List;

  })(Backbone.Collection);

  Item = (function(_super) {
    __extends(Item, _super);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.defaults = {
      num: 0,
      name: 'default'
    };

    Item.prototype.url = '/item';

    return Item;

  })(Backbone.Model);

  ItemView = (function(_super) {
    __extends(ItemView, _super);

    function ItemView() {
      return ItemView.__super__.constructor.apply(this, arguments);
    }

    ItemView.prototype.el = 'body';

    ItemView.prototype.html = "<h1>Item</h1>\n<p>\n	num: {{num}}\n	name: {{name}}\n</p>";

    ItemView.prototype.initialize = function() {
      return this.render();
    };

    ItemView.prototype.render = function() {
      this.$el.html(Mustache.render(this.html, this.model.toJSON()));
      return this;
    };

    return ItemView;

  })(Backbone.View);

  ListView = (function(_super) {
    __extends(ListView, _super);

    function ListView() {
      this.render = __bind(this.render, this);
      return ListView.__super__.constructor.apply(this, arguments);
    }

    ListView.prototype.el = 'body';

    ListView.prototype.events = {
      'click #add': 'add'
    };

    ListView.prototype.html = "<h1>List</h1>\n<button id=\"add\">Add</button>\n<ul>\n	{{#list}}\n		<li><a href=\"#/item/{{num}}\">{{num}}: {{name}}</a></li>\n	{{/list}}\n</ul>";

    ListView.prototype.initialize = function() {
      this.collection.on('change', this.render);
      return this.render();
    };

    ListView.prototype.render = function() {
      this.$el.html(Mustache.render(this.html, {
        list: this.collection.toJSON()
      }));
      return this;
    };

    ListView.prototype.add = function() {
      this.collection.add(new Item);
      return this.collection.trigger('change');
    };

    return ListView;

  })(Backbone.View);

}).call(this);
